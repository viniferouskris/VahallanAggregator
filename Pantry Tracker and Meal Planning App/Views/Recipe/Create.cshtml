@model CreateRecipeViewModel
@{
    ViewData["Title"] = "Create New Pattern";
}

<div class="container">
    <h2>Create New Wallpaper Pattern</h2>

    <form id="createRecipeForm" method="post" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <!-- Basic Recipe Info -->
        <div class="card mb-4">
            <div class="card-header">
                <h5>Pattern Information</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label asp-for="Name" class="form-label">Pattern Name</label>
                        <input asp-for="Name" class="form-control" placeholder="e.g., Eden Forest">
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Collection" class="form-label">Collection</label>
                        <input asp-for="Collection" class="form-control" placeholder="e.g., Enchanted Collection">
                        <span asp-validation-for="Collection" class="text-danger"></span>
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="Description" class="form-label">Description</label>
                    <textarea asp-for="Description" class="form-control" rows="3"
                              placeholder="Describe the pattern style, texture, and overall appearance..."></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        <label asp-for="PrepTimeMinutes" class="form-label">Prep Time (minutes)</label>
                        <input asp-for="PrepTimeMinutes" class="form-control" type="number">
                        <span asp-validation-for="PrepTimeMinutes" class="text-danger"></span>
                    </div>
                    <div class="col-md-4">
                        <label asp-for="CookTimeMinutes" class="form-label">Application Time (minutes)</label>
                        <input asp-for="CookTimeMinutes" class="form-control" type="number">
                        <span asp-validation-for="CookTimeMinutes" class="text-danger"></span>
                    </div>
                    <div class="col-md-4">
                        <label asp-for="AccuracyLevel" class="form-label">Accuracy Level</label>
                        <select asp-for="AccuracyLevel" class="form-select">
                            <option value="0">Estimate</option>
                            <option value="1">Tested</option>
                            <option value="2">Verified</option>
                            <option value="3">Professional</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Materials Section -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Materials & Amounts</h5>
                <button type="button" id="addIngredient" class="btn btn-success btn-sm">
                    <i class="fas fa-plus"></i> Add Material
                </button>
            </div>
            <div class="card-body">
                <div id="ingredientsList">
                    <!-- Dynamic ingredients will be added here -->
                </div>
            </div>
        </div>

        <!-- Instructions -->
        <div class="card mb-4">
            <div class="card-header">
                <h5>Instructions</h5>
            </div>
            <div class="card-body">
                <textarea asp-for="Instructions" class="form-control" rows="8"
                          placeholder="Step-by-step instructions for applying this wallpaper pattern..."></textarea>
                <span asp-validation-for="Instructions" class="text-danger"></span>
            </div>
        </div>

        <!-- Photo Upload -->
        <div class="card mb-4">
            <div class="card-header">
                <h5>Pattern Photos</h5>
            </div>
            <div class="card-body">
                <input type="file" id="photoUpload" name="files" multiple accept="image/*" class="form-control mb-3">
                <div id="photoPreview" class="row"></div>
                <small class="text-muted">Select multiple images to upload. First image will be the main photo.</small>
            </div>
        </div>

        <!-- Hidden field for ingredients JSON -->
        <input type="hidden" asp-for="IngredientsJson" id="ingredientsJson" />

        <!-- Submit Buttons -->
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Create Pattern</button>
            <a asp-action="Index" class="btn btn-secondary ms-2">Cancel</a>
        </div>
    </form>
</div>

<!-- Ingredient Row Template -->
<template id="ingredientRowTemplate">
    <div class="ingredient-row border rounded p-3 mb-3">
        <div class="row align-items-center">
            <div class="col-md-4">
                <label class="form-label">Material</label>
                <select class="form-select ingredient-select" name="ingredientId">
                    <option value="">Select a material...</option>
                    @foreach (var ingredient in ViewBag.AvailableIngredients as List<SelectListItem>)
                    {
                        <option value="@ingredient.Value" data-stored-unit="@ViewBag.IngredientUnits[int.Parse(ingredient.Value)]">
                            @ingredient.Text
                        </option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Quantity</label>
                <input type="number" class="form-control quantity-input" step="0.01" min="0" placeholder="0.00">
            </div>
            <div class="col-md-3">
                <label class="form-label">Unit</label>
                <select class="form-select unit-select">
                    <!-- Volume units -->
                    <optgroup label="Volume">
                        <option value="gallons">Gallons</option>
                        <option value="quarts">Quarts</option>
                        <option value="cups">Cups</option>
                        <option value="fl oz">Fluid Ounces (fl oz)</option>
                        <option value="liters">Liters</option>
                    </optgroup>
                    <!-- Mass/Weight units -->
                    <optgroup label="Weight">
                        <option value="lbs">Pounds (lbs)</option>
                        <option value="oz">Ounces (oz)</option>
                        <option value="kg">Kilograms</option>
                        <option value="g">Grams</option>
                    </optgroup>
                    <!-- Count units -->
                    <optgroup label="Count">
                        <option value="count">Count</option>
                        <option value="pieces">Pieces</option>
                        <option value="sheets">Sheets</option>
                    </optgroup>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Cost Est.</label>
                <div class="input-group">
                    <span class="input-group-text">$</span>
                    <input type="text" class="form-control cost-estimate" readonly>
                </div>
            </div>
            <div class="col-md-1">
                <label class="form-label">&nbsp;</label>
                <button type="button" class="btn btn-danger btn-sm d-block remove-ingredient">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    </div>
</template>

@section Scripts {
    <script>
        let ingredientCounter = 0;

        $(document).ready(function () {
            // Add first ingredient row
            addIngredientRow();

            // Photo upload preview
            $('#photoUpload').change(function (e) {
                $('#photoPreview').empty();
                const files = e.target.files;

                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    if (file.type.startsWith('image/')) {
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const col = $('<div class="col-md-3 mb-3">');
                            const img = $('<img>')
                                .attr('src', e.target.result)
                                .addClass('img-thumbnail')
                                .css('height', '150px')
                                .css('object-fit', 'cover');
                            col.append(img);
                            if (i === 0) {
                                col.append('<small class="text-success d-block">Main Photo</small>');
                            }
                            $('#photoPreview').append(col);
                        };
                        reader.readAsDataURL(file);
                    }
                }
            });

            // Add ingredient button
            $('#addIngredient').click(function () {
                addIngredientRow();
            });

            // Remove ingredient button (delegated event)
            $(document).on('click', '.remove-ingredient', function () {
                if ($('.ingredient-row').length > 1) {
                    $(this).closest('.ingredient-row').remove();
                    updateIngredientsJson();
                }
            });

            // Update JSON when inputs change
            $(document).on('change', '.ingredient-select, .quantity-input, .unit-select', function () {
                updateCostEstimate($(this).closest('.ingredient-row'));
                updateIngredientsJson();
            });

            // Form submission
            $('#createRecipeForm').submit(function (e) {
                e.preventDefault();
                updateIngredientsJson();

                // Validate ingredients
                if ($('.ingredient-select').filter(function () { return $(this).val(); }).length === 0) {
                    alert('Please add at least one material.');
                    return;
                }

                // Submit form via AJAX
                var formData = new FormData(this);

                $.ajax({
                    url: '@Url.Action("Create")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            window.location.href = response.redirectUrl;
                        } else {
                            alert('Error: ' + response.message);
                        }
                    },
                    error: function () {
                        alert('An error occurred while creating the pattern.');
                    }
                });
            });
        });

        function addIngredientRow() {
            const template = document.getElementById('ingredientRowTemplate');
            const clone = template.content.cloneNode(true);
            document.getElementById('ingredientsList').appendChild(clone);
            ingredientCounter++;
        }

        function updateCostEstimate(row) {
            const ingredientSelect = row.find('.ingredient-select');
            const quantityInput = row.find('.quantity-input');
            const unitSelect = row.find('.unit-select');
            const costEstimate = row.find('.cost-estimate');

            // This would require more complex logic to calculate actual costs
            // For now, just show placeholder
            if (ingredientSelect.val() && quantityInput.val()) {
                costEstimate.val('TBD');
            } else {
                costEstimate.val('');
            }
        }

        function updateIngredientsJson() {
            const ingredients = [];

            $('.ingredient-row').each(function () {
                const row = $(this);
                const ingredientId = row.find('.ingredient-select').val();
                const quantity = row.find('.quantity-input').val();
                const unit = row.find('.unit-select').val();

                if (ingredientId && quantity && unit) {
                    ingredients.push({
                        IngredientId: parseInt(ingredientId),
                        Quantity: parseFloat(quantity),
                        Unit: unit
                    });
                }
            });

            $('#ingredientsJson').val(JSON.stringify(ingredients));
        }
    </script>
}