@using Vahallan_Ingredient_Aggregator.Models.ViewModels
@using Vahallan_Ingredient_Aggregator.Models.Photo
@using UnitsNet
@model RecipeDetailsViewModel
@{
    ViewData["Title"] = Model.Name;
}

@section Styles {
    <link rel="stylesheet" href="~/css/photo-gallery.css" />
}

<div class="container-fluid">
    <div class="row">
        <!-- Recipe Details -->
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h1 class="h3 mb-0">@Model.Name</h1>
                    <div>
                        @if (Model.IsOwner)
                        {
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                                <i class="bi bi-pencil"></i> Edit Pattern
                            </a>
                        }
                    </div>
                </div>
                <div class="card-body">
                    <!-- Photo Gallery Section -->
                    <div id="photoGallery" class="photo-gallery mb-4">
                        <div id="mainPhoto" class="main-photo-container mb-3">
                            @if (Model.Photos.Any())
                            {
                                var mainPhoto = Model.Photos.FirstOrDefault(p => p.IsMain) ?? Model.Photos.First();
                                <img src="@mainPhoto.FilePath" class="img-fluid rounded" alt="@mainPhoto.Description" />
                            }
                        </div>

                        <div id="thumbnailGallery" class="row g-2">
                            @foreach (var photo in Model.Photos)
                            {
                                <div class="col-3">
                                    <img src="@photo.ThumbnailPath"
                                         class="img-thumbnail @(photo.IsMain ? "border-primary" : "")"
                                         data-full-image="@photo.FilePath"
                                         alt="@photo.Description"
                                         style="cursor: pointer;" />
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="mb-4">
                        <h5>Description</h5>
                        <p>@Model.Description</p>
                    </div>

                    <!-- Materials -->
                    <div class="mb-4">
                        <h5>Materials & Amounts</h5>
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Material</th>
                                        <th>Quantity</th>
                                        <th>Unit</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ingredient in Model.Ingredients)
                                    {
                                        <tr>
                                            <td>@ingredient.Name</td>
                                            <td>@ConvertQuantity(ingredient.Quantity, ingredient.Unit)</td>
                                            <td>@ConvertUnit(ingredient.Quantity, ingredient.Unit)</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Instructions -->
                    <div class="mb-4">
                        <h5>Instructions</h5>
                        <div class="card">
                            <div class="card-body">
                                @{
                                    var instructions = Model.Instructions.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
                                    foreach (var instruction in instructions)
                                    {
                                        <p>@instruction</p>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Pattern Information</h5>
                </div>
                <div class="card-body">
                    <dl class="row mb-0">
                        <dt class="col-sm-6">Standard Sheet Size:</dt>
                        <dd class="col-sm-6">@Model.StandardSheetSize sq ft</dd>

                        <dt class="col-sm-6">Total Time:</dt>
                        <dd class="col-sm-6">@(Model.PrepTimeMinutes + Model.CookTimeMinutes) minutes</dd>

                        @if (!string.IsNullOrEmpty(Model.Collection))
                        {
                            <dt class="col-sm-6">Collection:</dt>
                            <dd class="col-sm-6"><span class="badge bg-info">@Model.Collection</span></dd>
                        }
                    </dl>
                </div>
            </div>

            <!-- Materials List -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Materials List</h5>
                </div>
                <div class="card-body">
                    <ul class="list-unstyled mb-0">
                        @foreach (var ingredient in Model.Ingredients)
                        {
                            <li class="mb-2">
                                <i class="fas fa-circle text-primary" style="font-size: 0.5rem;"></i>
                                @ingredient.Name
                                @if (!string.IsNullOrEmpty(ingredient.MaterialType))
                                {
                                    <br>

                                    <small class="text-muted">@ingredient.MaterialType</small>
                                }
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string ConvertQuantity(decimal quantity, string unit)
    {
        try
        {
            // First try volume conversions using UnitsNet
            if (TryConvertVolume((double)quantity, unit, out double convertedQty, out string convertedUnit))
            {
                return Math.Round(convertedQty, 2).ToString();
            }

            // Then try mass conversions
            if (TryConvertMass((double)quantity, unit, out convertedQty, out convertedUnit))
            {
                return Math.Round(convertedQty, 2).ToString();
            }
        }
        catch
        {
            // Fall back to original if conversion fails
        }
        return Math.Round(quantity, 2).ToString();
    }

    private string ConvertUnit(decimal quantity, string unit)
    {
        try
        {
            if (TryConvertVolume((double)quantity, unit, out double convertedQty, out string convertedUnit))
            {
                return convertedUnit;
            }

            if (TryConvertMass((double)quantity, unit, out convertedQty, out convertedUnit))
            {
                return convertedUnit;
            }
        }
        catch
        {
            // Fall back to original if conversion fails
        }
        return unit ?? "units";
    }

    private bool TryConvertVolume(double quantity, string unit, out double convertedQuantity, out string convertedUnit)
    {
        convertedQuantity = 0;
        convertedUnit = "";

        try
        {
            Volume? volume = null;

            switch (unit?.ToLower().Trim())
            {
                case "gallon":
                case "gallons":
                case "gal":
                    volume = Volume.FromUsGallons(quantity);
                    break;
                case "quart":
                case "quarts":
                case "qt":
                    volume = Volume.FromUsQuarts(quantity);
                    break;
                case "liter":
                case "liters":
                case "l":
                    volume = Volume.FromLiters(quantity);
                    break;
                case "cup":
                case "cups":
                    volume = Volume.FromLiters(quantity * 0.236588); // Convert cups to liters first
                    break;
                case "fl oz":
                case "fluid ounce":
                case "fluid ounces":
                case "ounces": // Add this for your case
                    volume = Volume.FromLiters(quantity * 0.0295735); // Convert fl oz to liters
                    break;
                default:
                    return false;
            }

            if (volume.HasValue)
            {
                // Convert to most appropriate unit
                if (volume.Value.UsGallons >= 1)
                {
                    convertedQuantity = volume.Value.UsGallons;
                    convertedUnit = "gallons";
                }
                else if (volume.Value.UsQuarts >= 1)
                {
                    convertedQuantity = volume.Value.UsQuarts;
                    convertedUnit = "quarts";
                }
                else
                {
                    convertedQuantity = volume.Value.Liters * 33.814; // Convert to fl oz
                    convertedUnit = "fl oz";
                }
                return true;
            }
        }
        catch
        {
            // Fall through
        }
        return false;
    }

    private bool TryConvertMass(double quantity, string unit, out double convertedQuantity, out string convertedUnit)
    {
        convertedQuantity = 0;
        convertedUnit = "";

        try
        {
            Mass? mass = null;

            switch (unit?.ToLower().Trim())
            {
                case "pound":
                case "pounds":
                case "lb":
                case "lbs":
                    mass = Mass.FromPounds(quantity);
                    break;
                case "ounce":
                case "ounces":
                case "oz":
                    mass = Mass.FromOunces(quantity);
                    break;
                case "kilogram":
                case "kilograms":
                case "kg":
                    mass = Mass.FromKilograms(quantity);
                    break;
                case "gram":
                case "grams":
                case "g":
                    mass = Mass.FromGrams(quantity);
                    break;
                default:
                    return false;
            }

            if (mass.HasValue)
            {
                if (mass.Value.Pounds >= 1)
                {
                    convertedQuantity = mass.Value.Pounds;
                    convertedUnit = "lbs";
                }
                else
                {
                    convertedQuantity = mass.Value.Ounces;
                    convertedUnit = "oz";
                }
                return true;
            }
        }
        catch
        {
            // Fall through
        }
        return false;
    }
}

@section Scripts {
    <script src="~/js/unified-photo-handler.js"></script>
}