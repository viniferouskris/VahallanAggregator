@model IEnumerable<RecipeViewModel>

@{
    ViewData["Title"] = "Wallpaper Patterns";
}

<div class="container">
    <div class="row align-items-center mb-4">
        <div class="col">
            <h2>Wallpaper Patterns & Designs</h2>
            <p class="lead">Browse our collection of wallpaper patterns</p>
        </div>
        <div class="col-auto">
            @if (ViewBag.IsAdmin)
            {
                <a asp-action="Create" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Add New Pattern
                </a>
            }
        </div>
    </div>

    <!-- Search Input -->
    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text"
                   id="searchInput"
                   class="form-control"
                   placeholder="Search patterns by name or collection...">
        </div>
        <div class="col-md-6 text-end">
            <small class="text-muted">
                <span id="resultCount">@Model.Count()</span> patterns found
            </small>
        </div>
    </div>

    @if (Model.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="recipesTable">
                <thead class="table-dark">
                    <tr>
                        <th>Pattern Name</th>
                        <th>Collection</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var recipe in Model.OrderBy(r => r.Name))
                    {
                        <tr class="recipe-row">
                            <td>@recipe.Name</td>
                            <td>
                                @if (!string.IsNullOrEmpty(recipe.Collection))
                                {
                                    <span class="badge bg-info">@recipe.Collection</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <a asp-action="Details" asp-route-id="@recipe.Id"
                                       class="btn btn-outline-primary">
                                        <i class="fas fa-eye"></i> View
                                    </a>
                                    @if (ViewBag.IsAdmin)
                                    {
                                        <button type="button" class="btn btn-outline-danger"
                                                onclick="deleteRecipe(@recipe.Id, '@recipe.Name')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info text-center">
            <h4>No Patterns Available</h4>
            <p>There are currently no wallpaper patterns in the system.</p>
            @if (ViewBag.IsAdmin)
            {
                <a asp-action="Create" class="btn btn-primary">Add the First Pattern</a>
            }
        </div>
    }
</div>

@section Scripts {
    @Html.AntiForgeryToken()

    @if (ViewBag.IsAdmin)
    {
        <script>
            function deleteRecipe(recipeId, recipeName) {
                if (confirm(`Are you sure you want to delete "${recipeName}"?`)) {
                    fetch('@Url.Action("Delete")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(recipeId)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                location.reload();
                            } else {
                                alert('Error: ' + data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while deleting the pattern.');
                        });
                }
            }
        </script>
    }

    <script>
        // Simple client-side search functionality
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            const table = document.getElementById('recipesTable');
            const rows = table ? table.querySelectorAll('tbody tr') : [];
            const resultCount = document.getElementById('resultCount');

            if (searchInput && rows.length > 0) {
                searchInput.addEventListener('input', function () {
                    const searchTerm = this.value.toLowerCase();
                    let visibleCount = 0;

                    rows.forEach(row => {
                        const text = row.textContent.toLowerCase();
                        if (text.includes(searchTerm)) {
                            row.style.display = '';
                            visibleCount++;
                        } else {
                            row.style.display = 'none';
                        }
                    });

                    resultCount.textContent = visibleCount;
                });
            }
        });
    </script>
}