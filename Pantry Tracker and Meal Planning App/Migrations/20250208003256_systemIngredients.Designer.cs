// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Data;

#nullable disable

namespace Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250208003256_systemIngredients")]
    partial class systemIngredients
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MealPlanRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MealPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrepareOnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("ServingSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("MealPlanId", "RecipeId", "PrepareOnDate")
                        .IsUnique();

                    b.ToTable("MealPlanRecipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "9cadacaa-7a05-4df3-a431-5edab582d7ef",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "526bf264-e1e5-4646-bc1c-5e2439cf11d7",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "589a4996-1a5a-414a-93e1-6b5ee1f3fc4f",
                            Email = "admin@yourapp.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@YOURAPP.COM",
                            NormalizedUserName = "ADMIN@YOURAPP.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9OxZq3rB0aUJEq9I/3o7jjW6EQxXy47cIQazEFVhEpTRDmBXakaeVMlNLNbwWpYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90482457-dc93-46c8-977a-e385e56ee514",
                            TwoFactorEnabled = false,
                            UserName = "admin@yourapp.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-user-id",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RelatedItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Notifications.NotificationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoConfirmMealPlanDeductions")
                        .HasColumnType("bit");

                    b.Property<decimal>("DefaultLowStockThreshold")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("DefaultReplenishmentDays")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Pantry.PantryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CurrentQuantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("CurrentUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DailyUsageRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastPurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LastPurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LastPurchaseQuantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("LastPurchaseUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LowStockThreshold")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("ReplenishmentDays")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExpirationDate");

                    b.ToTable("PantryItems");
                });

            modelBuilder.Entity("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Photo.RecipePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainPhoto")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipePhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentType = "image/jpeg",
                            Description = "Classic Caprese Salad with alternating slices of mozzarella and tomato",
                            FileName = "caprese-main.jpg",
                            FilePath = "/recipe-photos/originals/caprese-main.jpg",
                            FileSize = 20L,
                            IsApproved = true,
                            IsMain = false,
                            IsMainPhoto = true,
                            RecipeId = 8,
                            ThumbnailPath = "/recipe-photos/thumbnails/caprese-main.jpg",
                            UploadedAt = new DateTime(2025, 2, 8, 0, 32, 56, 203, DateTimeKind.Utc).AddTicks(5702),
                            UploadedById = "system"
                        },
                        new
                        {
                            Id = 2,
                            ContentType = "image/jpeg",
                            Description = "Caprese Salad from a different angle",
                            FileName = "caprese-salad-recipe-1.jpg",
                            FilePath = "/recipe-photos/originals/caprese-salad-recipe-1.jpg",
                            FileSize = 18432L,
                            IsApproved = true,
                            IsMain = false,
                            IsMainPhoto = false,
                            RecipeId = 8,
                            ThumbnailPath = "/recipe-photos/thumbnails/caprese-salad-recipe-1.jpg",
                            UploadedAt = new DateTime(2025, 2, 8, 0, 32, 56, 203, DateTimeKind.Utc).AddTicks(5704),
                            UploadedById = "system"
                        });
                });

            modelBuilder.Entity("RecipeTag", b =>
                {
                    b.Property<int>("RecipesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("RecipesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("RecipeTags", (string)null);
                });

            modelBuilder.Entity("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Components.BaseIngredientComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<decimal>("StoredQuantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("StoredUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RecipeId");

                    b.ToTable("BaseIngredientComponent");

                    b.HasDiscriminator<string>("Type").HasValue("BaseIngredientComponent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Ingredient", b =>
                {
                    b.HasBaseType("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Components.BaseIngredientComponent");

                    b.Property<decimal>("CaloriesPerServing")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("CostPerPackage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemIngredient")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PromotionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PromotionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ServingsPerPackage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SystemIngredientId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Ingredient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 8, 0, 32, 56, 203, DateTimeKind.Utc).AddTicks(5667),
                            CreatedById = "system",
                            Name = "Fresh Mozzarella",
                            ParentId = 8,
                            Quantity = 16m,
                            StoredQuantity = 453.592m,
                            StoredUnit = "g",
                            Type = "Ingredient",
                            Unit = "oz",
                            CaloriesPerServing = 70m,
                            CostPerPackage = 5.99m,
                            IsPromoted = false,
                            IsSystemIngredient = true,
                            ServingsPerPackage = 16m
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 8, 0, 32, 56, 203, DateTimeKind.Utc).AddTicks(5674),
                            CreatedById = "system",
                            Name = "Ripe Tomatoes",
                            ParentId = 8,
                            Quantity = 4m,
                            StoredQuantity = 4m,
                            StoredUnit = "count",
                            Type = "Ingredient",
                            Unit = "count",
                            CaloriesPerServing = 22m,
                            CostPerPackage = 3.00m,
                            IsPromoted = false,
                            IsSystemIngredient = true,
                            ServingsPerPackage = 4m
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 2, 8, 0, 32, 56, 203, DateTimeKind.Utc).AddTicks(5678),
                            CreatedById = "system",
                            Name = "Fresh Basil Leaves",
                            ParentId = 8,
                            Quantity = 20m,
                            StoredQuantity = 20m,
                            StoredUnit = "count",
                            Type = "Ingredient",
                            Unit = "count",
                            CaloriesPerServing = 1m,
                            CostPerPackage = 2.99m,
                            IsPromoted = false,
                            IsSystemIngredient = true,
                            ServingsPerPackage = 30m
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 2, 8, 0, 32, 56, 203, DateTimeKind.Utc).AddTicks(5682),
                            CreatedById = "system",
                            Name = "Extra Virgin Olive Oil",
                            ParentId = 8,
                            Quantity = 2m,
                            StoredQuantity = 29.5735m,
                            StoredUnit = "ml",
                            Type = "Ingredient",
                            Unit = "tbsp",
                            CaloriesPerServing = 120m,
                            CostPerPackage = 8.99m,
                            IsPromoted = false,
                            IsSystemIngredient = true,
                            ServingsPerPackage = 33.8m
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 2, 8, 0, 32, 56, 203, DateTimeKind.Utc).AddTicks(5685),
                            CreatedById = "system",
                            Name = "Balsamic Vinegar",
                            ParentId = 8,
                            Quantity = 2m,
                            StoredQuantity = 29.5735m,
                            StoredUnit = "ml",
                            Type = "Ingredient",
                            Unit = "tbsp",
                            CaloriesPerServing = 14m,
                            CostPerPackage = 5.99m,
                            IsPromoted = false,
                            IsSystemIngredient = true,
                            ServingsPerPackage = 16.9m
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 2, 8, 0, 32, 56, 203, DateTimeKind.Utc).AddTicks(5689),
                            CreatedById = "system",
                            Name = "Salt",
                            ParentId = 8,
                            Quantity = 0.5m,
                            StoredQuantity = 2.46446m,
                            StoredUnit = "ml",
                            Type = "Ingredient",
                            Unit = "tsp",
                            CaloriesPerServing = 0m,
                            CostPerPackage = 0.99m,
                            IsPromoted = false,
                            IsSystemIngredient = true,
                            ServingsPerPackage = 156m
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 2, 8, 0, 32, 56, 203, DateTimeKind.Utc).AddTicks(5692),
                            CreatedById = "system",
                            Name = "Black Pepper",
                            ParentId = 8,
                            Quantity = 0.25m,
                            StoredQuantity = 1.23223m,
                            StoredUnit = "ml",
                            Type = "Ingredient",
                            Unit = "tsp",
                            CaloriesPerServing = 0m,
                            CostPerPackage = 3.99m,
                            IsPromoted = false,
                            IsSystemIngredient = true,
                            ServingsPerPackage = 144m
                        });
                });

            modelBuilder.Entity("MealPlan", b =>
                {
                    b.HasBaseType("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Components.BaseIngredientComponent");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServingSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MealPlan");
                });

            modelBuilder.Entity("Recipe", b =>
                {
                    b.HasBaseType("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Components.BaseIngredientComponent");

                    b.Property<int>("CookTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ImportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<decimal>("NumberOfServings")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OriginalRecipeId")
                        .HasColumnType("int");

                    b.Property<int>("PrepTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Recipe");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 2, 8, 0, 32, 56, 203, DateTimeKind.Utc).AddTicks(5646),
                            CreatedById = "system",
                            Name = "Classic Caprese Salad",
                            Quantity = 4m,
                            StoredQuantity = 4m,
                            StoredUnit = "serving",
                            Type = "Recipe",
                            Unit = "serving",
                            CookTimeMinutes = 0,
                            Description = "A simple and elegant Italian salad made with fresh mozzarella, tomatoes, and basil.",
                            Instructions = "1. Slice the mozzarella and tomatoes into 1/4-inch thick slices.\r\n2. On a serving plate, alternately arrange the mozzarella and tomato slices in a circular pattern.\r\n3. Tuck fresh basil leaves between the mozzarella and tomato slices.\r\n4. Drizzle with extra virgin olive oil and balsamic vinegar.\r\n5. Season with salt and freshly ground black pepper.\r\n6. Serve immediately at room temperature.",
                            IsPublic = true,
                            NumberOfServings = 0m,
                            PrepTimeMinutes = 15,
                            Version = 1
                        });
                });

            modelBuilder.Entity("MealPlanRecipe", b =>
                {
                    b.HasOne("MealPlan", "MealPlan")
                        .WithMany("MealPlanRecipes")
                        .HasForeignKey("MealPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MealPlan");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Photo.RecipePhoto", b =>
                {
                    b.HasOne("Recipe", null)
                        .WithMany("Photos")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeTag", b =>
                {
                    b.HasOne("Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Components.BaseIngredientComponent", b =>
                {
                    b.HasOne("Pantry_Tracker_and_Meal_Planning_with_TheMealAPI_App.Models.Components.BaseIngredientComponent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Recipe", null)
                        .WithMany("Components")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MealPlan", b =>
                {
                    b.Navigation("MealPlanRecipes");
                });

            modelBuilder.Entity("Recipe", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
